/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.wso2.carbon.apimgt.impl.generated.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ConditionGroupDTO implements org.apache.thrift.TBase<ConditionGroupDTO, ConditionGroupDTO._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConditionGroupDTO");

  private static final org.apache.thrift.protocol.TField CONDITION_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("conditionGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONDITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("conditions", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ConditionGroupDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ConditionGroupDTOTupleSchemeFactory());
  }

  public String conditionGroupId; // optional
  public List<ConditionDTO> conditions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONDITION_GROUP_ID((short)1, "conditionGroupId"),
    CONDITIONS((short)2, "conditions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONDITION_GROUP_ID
          return CONDITION_GROUP_ID;
        case 2: // CONDITIONS
          return CONDITIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CONDITION_GROUP_ID,_Fields.CONDITIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONDITION_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("conditionGroupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONDITIONS, new org.apache.thrift.meta_data.FieldMetaData("conditions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ConditionDTO.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConditionGroupDTO.class, metaDataMap);
  }

  public ConditionGroupDTO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ConditionGroupDTO(ConditionGroupDTO other) {
    if (other.isSetConditionGroupId()) {
      this.conditionGroupId = other.conditionGroupId;
    }
    if (other.isSetConditions()) {
      List<ConditionDTO> __this__conditions = new ArrayList<ConditionDTO>();
      for (ConditionDTO other_element : other.conditions) {
        __this__conditions.add(new ConditionDTO(other_element));
      }
      this.conditions = __this__conditions;
    }
  }

  public ConditionGroupDTO deepCopy() {
    return new ConditionGroupDTO(this);
  }

  @Override
  public void clear() {
    this.conditionGroupId = null;
    this.conditions = null;
  }

  public String getConditionGroupId() {
    return this.conditionGroupId;
  }

  public ConditionGroupDTO setConditionGroupId(String conditionGroupId) {
    this.conditionGroupId = conditionGroupId;
    return this;
  }

  public void unsetConditionGroupId() {
    this.conditionGroupId = null;
  }

  /** Returns true if field conditionGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetConditionGroupId() {
    return this.conditionGroupId != null;
  }

  public void setConditionGroupIdIsSet(boolean value) {
    if (!value) {
      this.conditionGroupId = null;
    }
  }

  public int getConditionsSize() {
    return (this.conditions == null) ? 0 : this.conditions.size();
  }

  public java.util.Iterator<ConditionDTO> getConditionsIterator() {
    return (this.conditions == null) ? null : this.conditions.iterator();
  }

  public void addToConditions(ConditionDTO elem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<ConditionDTO>();
    }
    this.conditions.add(elem);
  }

  public List<ConditionDTO> getConditions() {
    return this.conditions;
  }

  public ConditionGroupDTO setConditions(List<ConditionDTO> conditions) {
    this.conditions = conditions;
    return this;
  }

  public void unsetConditions() {
    this.conditions = null;
  }

  /** Returns true if field conditions is set (has been assigned a value) and false otherwise */
  public boolean isSetConditions() {
    return this.conditions != null;
  }

  public void setConditionsIsSet(boolean value) {
    if (!value) {
      this.conditions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONDITION_GROUP_ID:
      if (value == null) {
        unsetConditionGroupId();
      } else {
        setConditionGroupId((String)value);
      }
      break;

    case CONDITIONS:
      if (value == null) {
        unsetConditions();
      } else {
        setConditions((List<ConditionDTO>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONDITION_GROUP_ID:
      return getConditionGroupId();

    case CONDITIONS:
      return getConditions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONDITION_GROUP_ID:
      return isSetConditionGroupId();
    case CONDITIONS:
      return isSetConditions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ConditionGroupDTO)
      return this.equals((ConditionGroupDTO)that);
    return false;
  }

  public boolean equals(ConditionGroupDTO that) {
    if (that == null)
      return false;

    boolean this_present_conditionGroupId = true && this.isSetConditionGroupId();
    boolean that_present_conditionGroupId = true && that.isSetConditionGroupId();
    if (this_present_conditionGroupId || that_present_conditionGroupId) {
      if (!(this_present_conditionGroupId && that_present_conditionGroupId))
        return false;
      if (!this.conditionGroupId.equals(that.conditionGroupId))
        return false;
    }

    boolean this_present_conditions = true && this.isSetConditions();
    boolean that_present_conditions = true && that.isSetConditions();
    if (this_present_conditions || that_present_conditions) {
      if (!(this_present_conditions && that_present_conditions))
        return false;
      if (!this.conditions.equals(that.conditions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ConditionGroupDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ConditionGroupDTO typedOther = (ConditionGroupDTO)other;

    lastComparison = Boolean.valueOf(isSetConditionGroupId()).compareTo(typedOther.isSetConditionGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConditionGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditionGroupId, typedOther.conditionGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConditions()).compareTo(typedOther.isSetConditions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConditions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditions, typedOther.conditions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ConditionGroupDTO(");
    boolean first = true;

    if (isSetConditionGroupId()) {
      sb.append("conditionGroupId:");
      if (this.conditionGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.conditionGroupId);
      }
      first = false;
    }
    if (isSetConditions()) {
      if (!first) sb.append(", ");
      sb.append("conditions:");
      if (this.conditions == null) {
        sb.append("null");
      } else {
        sb.append(this.conditions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ConditionGroupDTOStandardSchemeFactory implements SchemeFactory {
    public ConditionGroupDTOStandardScheme getScheme() {
      return new ConditionGroupDTOStandardScheme();
    }
  }

  private static class ConditionGroupDTOStandardScheme extends StandardScheme<ConditionGroupDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ConditionGroupDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONDITION_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.conditionGroupId = iprot.readString();
              struct.setConditionGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONDITIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.conditions = new ArrayList<ConditionDTO>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  ConditionDTO _elem26; // required
                  _elem26 = new ConditionDTO();
                  _elem26.read(iprot);
                  struct.conditions.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setConditionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ConditionGroupDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.conditionGroupId != null) {
        if (struct.isSetConditionGroupId()) {
          oprot.writeFieldBegin(CONDITION_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.conditionGroupId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.conditions != null) {
        if (struct.isSetConditions()) {
          oprot.writeFieldBegin(CONDITIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.conditions.size()));
            for (ConditionDTO _iter27 : struct.conditions)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ConditionGroupDTOTupleSchemeFactory implements SchemeFactory {
    public ConditionGroupDTOTupleScheme getScheme() {
      return new ConditionGroupDTOTupleScheme();
    }
  }

  private static class ConditionGroupDTOTupleScheme extends TupleScheme<ConditionGroupDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ConditionGroupDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetConditionGroupId()) {
        optionals.set(0);
      }
      if (struct.isSetConditions()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetConditionGroupId()) {
        oprot.writeString(struct.conditionGroupId);
      }
      if (struct.isSetConditions()) {
        {
          oprot.writeI32(struct.conditions.size());
          for (ConditionDTO _iter28 : struct.conditions)
          {
            _iter28.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ConditionGroupDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.conditionGroupId = iprot.readString();
        struct.setConditionGroupIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.conditions = new ArrayList<ConditionDTO>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            ConditionDTO _elem31; // required
            _elem31 = new ConditionDTO();
            _elem31.read(iprot);
            struct.conditions.add(_elem31);
          }
        }
        struct.setConditionsIsSet(true);
      }
    }
  }

}

